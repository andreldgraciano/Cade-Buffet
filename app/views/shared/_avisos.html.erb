<h3 style="background-color: green; display: inline-block; padding: 10px;">
  <ul>
    <li>Impedir que o buffet_profile acesse qualquer rota antes de cadastrar o buffet</li>
    <li>adicionar valor da Hora adicional no pedido</li>
    <li>Melhorar as partials do show order, colocar logica dentro da partial e n no show.html.erb</li>
    <li>Modificar a forma de pagamento que o dono do buffet seleciona para o pedido de um evento, atraves de checkbox</li>
    <li>concertar a forma que calcula order, pra ver se n precisa chamar um metodo e salvar tudo junto</li>
    <li>Certificar que nao da pra vincular um cadastro de um evento em outro buffet</li>
    <li>Ajustar preços de final de semana</li>
    <li>Caso a data atual ainda seja anterior à data-limite, o cliente pode confirmar o pedido. Pedidos confirmados indicam que o evento será realizado.</li>
    <li>Revisar autorização nos controllers: before_action(:authenticate_buffet_profile!, only: [:new, :show])</li>
    <li>Nested routes para um order (buffet/1/new_order) ou algo assim. Igual fez para order_item na aula 39. Enviar um array em models do form. <br>
      <p>Rota:</p>
      <code><%= 'resources :orders, only: [:index, :show, :new, :create, :edit, :update] do' %> </code> <br>
      <code><%= 'resources :order_items, only: [:new, :create]' %></code>
      <p>Form:</p>
      <code><%= 'form_with(model: [@order, @order_item]) do |form|' %></code>
      <p>Controller:</p>
      <code><%= 'def create' %></code><br>
      <code><%= '    @order.order_items.create(order_item_params)' %></code><br>
      <code><%= "    redirect_to @order, notice: 'Item adicionado com sucesso'" %></code><br>
      <code><%= '  end' %></code>
    </li>
  </ul>
</h3>
    <p>Enum para filtrar pedidos um id de status ao inves da string</p>